# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CommentDto {
  id: ID!
  content: String!
  creatorName: String!
  createdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ReactionsCount {
  like: Int!
  dislike: Int!
  smile: Int!
  angry: Int!
  sad: Int!
  love: Int!
}

type UserDetail {
  id: String
  email: String
  firstName: String
  lastName: String
  username: String
  postsCount: Int
  commentsCount: Int
  likesCount: Int
  joinedGroupsCount: Int
  banStrikesCount: Int
  sentNotificationsCount: Int
  filedReportsCount: Int
  receivedReportsCount: Int
  friendsCount: Int
  moderatedGroupsCount: Int
  createdGroupsCount: Int
}

type CommentDetail {
  id: String!
  content: String!
  creator: UserDetail!
  creatorId: String!
  postId: String!
  reactionsCount: Int!
  reactions: ReactionsCount!
  reportsCount: Int!
  strikesCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type InterestDetail {
  id: String
  name: String
  postsCount: Int
  groupsCount: Int
  posts: [PostDetail!]
  groups: [GroupDetail!]
}

type GroupDetail {
  id: String!
  name: String!
  interest: InterestDetail!
  owner: UserDetail!
  moderators: [UserDetail!]!
  users: [UserDetail!]!
  membersCount: Int!
  posts: [PostDetail!]!
  postsCount: Int!
}

type PostDetail {
  id: String!
  content: String!
  creator: UserDetail!
  commentsCount: Int
  reactions: ReactionsCount
  createdAt: DateTime!
  updatedAt: DateTime!
  interest: InterestDetail
  group: GroupDetail
  reportsCount: Int
  strikesCount: Int
  pinnedComment: CommentDetail
  isPinned: Boolean
}

type GenericResponse {
  message: String
}

type SignInResponse {
  accessToken: String!
  refreshToken: String!
}

type PaginatedCommentsResponse {
  total: Int
  page: Int
  limit: Int
  items: [CommentDto!]
}

type PostGraphDataDto {
  period: String!
  count: Int!
}

type PaginatedPostsListResponse {
  total: Int
  page: Int
  limit: Int
  items: [PostDetail!]
}

type PaginatedUsersResponse {
  total: Int
  page: Int
  limit: Int
  items: [UserDetail!]
}

type Query {
  GetPostComments(postId: String!, page: Int!, limit: Int!): PaginatedCommentsResponse!
  GetPostDetail(postId: String!): PostDetail!
  getPostsStatistics(filter: GraphFilter!, year: Int, weekNumber: Int): [PostGraphDataDto!]!
  getPosts(page: Int! = 1, limit: Int! = 10): PaginatedPostsListResponse!
  hello: String!
  user(id: ID, username: String, firstName: String, lastName: String): UserDetail!
  getUsers(page: Int! = 1, limit: Int! = 10): PaginatedUsersResponse!
}

"""Filter options for the graph data"""
enum GraphFilter {
  Day
  Month
  Year
}

type Mutation {
  SignInAdmin(signIn: SignInCredentials!): SignInResponse!
  CreateAdmin(createAdminDto: CreateAdminDto!): GenericResponse!
  createGroup(createGroupDto: CreateGroupDto!): GenericResponse!
  AddReaction(createOrUpdateReactionData: CreateOrUpdateReactionDto!): GenericResponse!
  CreateComment(createComment: CreateCommentDto!, postId: String!): GenericResponse!
  PinComment(postId: String!, commentId: String!): GenericResponse!
  CreatePost(createPost: CreatePostDto!): GenericResponse!
  SignInUser(signInUser: SignInCredentials!): SignInResponse!
  refreshToken(refreshToken: String!): SignInResponse!
  logout(userId: String!): GenericResponse!
  CreateUser(createUser: CreateUserDto!): GenericResponse!
}

input SignInCredentials {
  password: String!
  passwordRepeat: String!
  email: String!
}

input CreateAdminDto {
  username: String!
  email: String!
  password: String!
  adminRole: AdminRole! = MODERATOR
}

"""Different types of roles available"""
enum AdminRole {
  MODERATOR
  SUPERVISOR
  ADMINISTRATOR
  ADMIN
  SUPER_ADMIN
}

input CreateGroupDto {
  name: String!
  interestId: String!
}

input CreateOrUpdateReactionDto {
  reactionType: ReactionType!
  targetId: String!
  targetType: ReactionTargetType!
}

"""Different types of reactions available"""
enum ReactionType {
  LIKE
  DISLIKE
  SMILE
  ANGRY
  SAD
  LOVE
}

"""Target type for the reaction, either POST or COMMENT"""
enum ReactionTargetType {
  POST
  COMMENT
}

input CreateCommentDto {
  content: String!
}

input CreatePostDto {
  content: String!
  interestId: String
  groupId: String
}

input CreateUserDto {
  firstName: String!
  lastName: String!
  password: String!
  repeatPassword: String!
  email: String!
}